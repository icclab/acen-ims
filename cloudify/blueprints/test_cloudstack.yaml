tosca_definitions_version: cloudify_dsl_1_0

#########################################################
# This blueprint demonstrates a SIMPLE "Hello World" template
# initiating a simple stack of following CloudStack resources
# and their relationships:
#  - VPC
#  - Network
#  - VM
#  - Floating IP (and full NAT between the VM and this address)
# Tested with Cloudify 3.2.1, Cloudify CloudStack plugin 1.2.1
# without cloudify manager using CLI
#  - cfy local init --install-plugins -p test_cloudstack.yaml
#  - cfy local execute -w install
#########################################################

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2.1/types.yaml
  - http://www.getcloudify.org/spec/cloudstack-plugin/1.2.1/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.2.1/plugin.yaml

inputs:
  cs_api_key:
    description: 'CloudStack API key'
  cs_api_secret:
    description: 'CloudStack API secret'
  cs_api_url:
    description: 'CloudStack API URL'

  image_id:
    description: 'VM template id'
    default: '5c63ae06-c0bb-41d6-b800-f548eeb63588'
  size_id:
    description: 'VM service offering name'
    default: '2vCPU-4GB'
  key_name:
    description: 'SSH key name'
    default: 'cima_key'

  zone:
    description: 'CloudStack zone'
    default: 'swiss2'

  network_offering:
    description: 'Network offering name'
    default: 'Offering for Isolated VPC networks - with External LoadBalancer'

node_templates:
  test_vm:
    type: cloudify.cloudstack.nodes.VirtualMachine
    properties:
      server:
        image_id: { get_input: image_id }
        size: { get_input: size_id }
        key_name: { get_input: key_name }
      install_agent: false
      network:
        default_network: { get_property: [test_network, resource_id] }
      portmaps:
        - protocol: TCP
          private_port: 1
          private_end_port: 65535
          public_port: 1
          public_end_port: 65535
      cloudstack_config:
        cs_api_key: { get_input: cs_api_key }
        cs_api_secret: { get_input: cs_api_secret }
        cs_api_url: { get_input: cs_api_url }
    relationships:
      - type: cloudify.relationships.connected_to
        target: test_network
      - type: cloudify.cloudstack.virtual_machine_connected_to_floating_ip
        target: test_floatingip

  test_application:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: script.sh
            fabric_env:
              user: ubuntu
              key_filename: /root/id_rsa
              host_string: { get_attribute: [ test_floatingip, floating_ip_address ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: test_vm

  test_network:
    type: cloudify.cloudstack.nodes.Network
    properties:
      resource_id: 'test_net' 
      network:
        vpc: { get_property: [test_vpc, resource_id] }
        service_offering: { get_input: network_offering}
        zone: { get_input: zone }
        gateway: '10.5.7.1'
        netmask: '255.255.255.0'
      cloudstack_config:
        cs_api_key: { get_input: cs_api_key }
        cs_api_secret: { get_input: cs_api_secret }
        cs_api_url: { get_input: cs_api_url }
      firewall:
        - type: ingress
          protocol: TCP
          cidr: 0.0.0.0/0
          ports: [22]
    relationships:
      - type: cloudify.relationships.contained_in
        target: test_vpc

  test_vpc:
    type: cloudify.cloudstack.nodes.VPC
    properties:
      resource_id: 'cloudify-vpc'
      network:
        service_offering: 'Default VPC offering'
        zone: { get_input: zone }
        cidr: '10.5.0.0/16'
      cloudstack_config:
        cs_api_key: { get_input: cs_api_key }
        cs_api_secret: { get_input: cs_api_secret }
        cs_api_url: { get_input: cs_api_url }

  test_floatingip:
    type: cloudify.cloudstack.nodes.FloatingIP
    relationships:
      - type: cloudify.cloudstack.floating_ip_connected_to_network
        target: test_network

outputs:
  endpoint:
    value:
      ip_address: { get_attribute: [ test_floatingip, floating_ip_address ] }
